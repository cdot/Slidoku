import chai from "chai";
const assert = chai.assert;

import { Board } from "../src/Board.js";
import { Singles } from "../src/Singles.js";

const BLANK = `
123456789
|0|0|0|1|1|1|2|2|2|
|0|0|0|1|1|1|2|2|2|
|0|0|0|1|1|1|2|2|2|
|3|3|3|4|4|4|5|5|5|
|3|3|3|4|4|4|5|5|5|
|3|3|3|4|4|4|5|5|5|
|6|6|6|7|7|7|8|8|8|
|6|6|6|7|7|7|8|8|8|
|6|6|6|7|7|7|8|8|8|

| | | | | | | | | |
| | | | | | | | | |
| | | | | | | | | |
| | | | | | | | | |
| | | | | | | | | |
| | | | | | | | | |
| | | | | | | | | |
| | | | | | | | | |
| | | | | | | | | |
`;

const PUZZLE = `
|0|0|0|1|1|1|2|2|2|
|0|0|0|1|1|1|2|2|2|
|0|0|0|1|1|1|2|2|2|
|3|3|3|4|4|4|5|5|5|
|3|3|3|4|4|4|5|5|5|
|3|3|3|4|4|4|5|5|5|
|6|6|6|7|7|7|8|8|8|
|6|6|6|7|7|7|8|8|8|
|6|6|6|7|7|7|8|8|8|

| | | | | |5| |8| |
|9| |5| | | | | |2|
| | | |4| | | | |1|
| |3| | | |1|4| | |
| |7| | | | | | | |
| | |8| | | |3|7| |
| | | |7|3|4| | | |
|8|2| | |1| | | | |
|6| | | |8| | | | |`;

describe("Singles", () => {

  it("area", () => {
    const b = Board.loadPuzzle(BLANK);
    b.loadPossibilities(`
|1234  7  |1  4 6   |1234 67  |123  6  9| 2   67 9|    5    |     67 9|       8 |  34 67 9|
|        9|1  4 6 8 |    5    |1 3  6 8 |     67  |  3  678 |     67  |  34 6   | 2       |
| 23   7  |     6 8 | 23  67  |   4     | 2   67 9| 23  6789|    567 9|  3 56  9|1        |
| 2  5    |  3      | 2   6  9| 2  56 89| 2  567 9|1        |   4     | 2  56  9|    56 89|
|12 45    |      7  |12 4 6  9| 23 56 89| 2 456  9| 23  6 89|12  56 89|12  56  9|    56 89|
|12 45    |1  456  9|       8 | 2  56  9| 2 456  9| 2   6  9|  3      |      7  |    56  9|
|1   5    |1   5   9|1       9|      7  |  3      |   4     |12  56 89|12  56  9|    56 89|
|       8 | 2       |  34  7 9|    56  9|1        |     6  9|    567 9|  3456  9|  34567 9|
|     6   |1  45   9|1 34  7 9| 2  5   9|       8 | 2      9|12  5 7 9|12345   9|  345 7 9|
`);
    const ass = Singles.area(b);
    assert.equal(ass, 3);

    assert.equal(
      b.savePossibilities(0),
      "|1234  7  |1  4 6   |12 4 6   |123     9| 2      9|    5    |     6  9|       8 |  34 6  9|");
    assert.equal(
      b.savePossibilities(1),
      "|        9|1  4   8 |    5    |1 3    8 |     6   |  3    8 |      7  |  34     | 2       |");
    assert.equal(
      b.savePossibilities(2),
      "| 23   7  |     6 8 | 2   6   |   4     | 2      9| 23   789|    56  9|  3 56  9|1        |");
    assert.equal(
      b.savePossibilities(3),
      "| 2  5    |  3      | 2   6  9| 2   6 89|      7  |1        |   4     | 2  56  9|    56 89|");
    assert.equal(
      b.savePossibilities(4),
      "| 2 45    |      7  | 2 4 6  9| 23  6 89| 2 45   9| 23  6 89|12  56 89|12  56  9|    56 89|");
    assert.equal(
      b.savePossibilities(5),
      "|12 45    |1  456  9|       8 | 2   6  9| 2 45   9| 2   6  9|  3      |      7  |    56  9|");
    assert.equal(
      b.savePossibilities(6),
      "|1   5    |1   5   9|1       9|      7  |  3      |   4     |12  56 89|12  56  9|    56 89|");
    assert.equal(
      b.savePossibilities(7),
      "|       8 | 2       |  34  7 9|    56  9|1        |     6  9|    5   9|  345   9|  345 7 9|");
    assert.equal(
      b.savePossibilities(8),
      "|     6   |1  45   9|1 34  7 9| 2  5   9|       8 | 2      9|1   5   9|1 345   9|  345 7 9|");
  });

  it("row", () => {
    const b = Board.loadPuzzle(BLANK);

    // 7 only possible at 3,4 and 2,5
    b.loadPossibilities(`
|12347|146  |1246 |1239 |29  |5    |69    |8    |3469 |
|9    |148  |5    |138  |6   |38   |7     |34   |2    |
|237  |68   |26   |4    |29  |23789|569   |3569 |1    |
|25   |3    |269  |2689 |2579|1    |4     |2569 |5689 |
|245  |7    |2469 |23689|2459|23689|125689|12569|5689 |
|1245 |14569|8    |269  |2459|269  |3     |7    |569  |
|15   |159  |19   |7    |3   |4    |125689|12569|5689 |
|8    |2    |3479 |569  |1   |69   |59    |3459 |34579|
|6    |1459 |13479|259  |8   |29   |159   |13459|34579|`);
    // Fixes expected at 0,0 2,5 3,4
    assert.equal(Singles.row(b), 3);

    b.checkPossibilities(`
|      7  |1  4 6   |12 4 6   |123     9| 2      9|    5    |     6  9|       8 |  34 6  9|
|        9|1  4   8 |    5    |1 3    8 |     6   |  3    8 |      7  |  34     | 2       |
| 23      |     6 8 | 2   6   |   4     | 2      9|      7  |    56  9|  3 56  9|1        |
| 2  5    |  3      | 2   6  9| 2   6 89|      7  |1        |   4     | 2  56  9|    56 89|
| 2 45    |      7  | 2 4 6  9| 23  6 89| 2 45   9| 23  6 89|12  56 89|12  56  9|    56 89|
|12 45    |1  456  9|       8 | 2   6  9| 2 45   9| 2   6  9|  3      |      7  |    56  9|
|1   5    |1   5   9|1       9|      7  |  3      |   4     |12  56 89|12  56  9|    56 89|
|       8 | 2       |  34  7 9|    56  9|1        |     6  9|    5   9|  345   9|  345 7 9|
|     6   |1  45   9|1 34  7 9| 2  5   9|       8 | 2      9|1   5   9|1 345   9|  345 7 9|`, e => assert(false, e));
  });
    
  it("column", () => {
    const b = Board.loadPuzzle(BLANK);

    // 7 only possible at 3,4 and 2,5
    b.loadPossibilities(`
|12347|146  |1246 |1239 |29  |5    |69    |8    |3469 |
|9    |148  |5    |138  |6   |38   |7     |34   |2    |
|237  |68   |26   |4    |29  |23789|569   |3569 |1    |
|25   |3    |269  |2689 |2579|1    |4     |2569 |5689 |
|245  |7    |2469 |23689|2459|23689|125689|12569|5689 |
|1245 |14569|8    |269  |2459|269  |3     |7    |569  |
|15   |159  |19   |7    |3   |4    |125689|12569|5689 |
|8    |2    |3479 |569  |1   |69   |59    |3459 |34579|
|6    |1459 |13479|259  |8   |29   |159   |13459|34579|`);

    // 7 only possible at 3,4 and 2,5
    // Fixes expected at 3,4 2,5
    assert.equal(Singles.column(b), 2);

    b.checkPossibilities(`
|1234  7  |1  4 6   |12 4 6   |123     9| 2      9|    5    |     6  9|       8 |  34 6  9|
|        9|1  4   8 |    5    |1 3    8 |     6   |  3    8 |      7  |  34     | 2       |
| 23      |     6 8 | 2   6   |   4     | 2      9|      7  |    56  9|  3 56  9|1        |
| 2  5    |  3      | 2   6  9| 2   6 89|      7  |1        |   4     | 2  56  9|    56 89|
| 2 45    |      7  | 2 4 6  9| 23  6 89| 2 45   9| 23  6 89|12  56 89|12  56  9|    56 89|
|12 45    |1  456  9|       8 | 2   6  9| 2 45   9| 2   6  9|  3      |      7  |    56  9|
|1   5    |1   5   9|1       9|      7  |  3      |   4     |12  56 89|12  56  9|    56 89|
|       8 | 2       |  34  7 9|    56  9|1        |     6  9|    5   9|  345   9|  345 7 9|
|     6   |1  45   9|1 34  7 9| 2  5   9|       8 | 2      9|1   5   9|1 345   9|  345 7 9|`, e => assert(false, e));
  });

  it("constrained", () => {
    const b = Board.loadPuzzle(`
ABCD
|0|0|1|1|
|0|0|1|1|
|2|2|3|3|
|2|2|3|3|

|||||
|||||
|||||
|||||
`);

    b.loadPossibilities(`
|A   |   D| B  |  C |
| B  |  C |   D|A   |
|  C | B  |ABCD|   D|
|   D|A   |  C | B  |
`);
    assert.equal(Singles.row(b), 1);
    b.checkPossibilities(`
|A   |   D| B  |  C |
| B  |  C |   D|A   |
|  C | B  |A   |   D|
|   D|A   |  C | B  |
`, e => assert(false, e));

    b.loadPossibilities(`
|A   |   D| B  |  C |
| B  |  C |   D|A   |
|  C | B  |ABCD|   D|
|   D|A   |  C | B  |
`);
    assert.equal(Singles.column(b), 1);
    b.checkPossibilities(`
|A   |   D| B  |  C |
| B  |  C |   D|A   |
|  C | B  |A   |   D|
|   D|A   |  C | B  |
`, e => assert(false, e));

    b.loadPossibilities(`
|A   |   D| B  |  C |
| B  |  C |   D|A   |
|  C | B  |ABCD|   D|
|   D|A   |  C | B  |
`);
    assert.equal(Singles.area(b), 1);
    b.checkPossibilities(`
|A   |   D| B  |  C |
| B  |  C |   D|A   |
|  C | B  |A   |   D|
|   D|A   |  C | B  |
`, e => assert(false, e));
  });
});    
